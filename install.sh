#!/usr/bin/env bash
set -euo pipefail

# ================== 配置 ==================
REPO="beiaduo/port-shaper"
BIN_NAME="port-shaper"
BIN_DIR="/usr/local/lib/port-shaper"
BIN_PATH="${BIN_DIR}/${BIN_NAME}"
CLI_PATH="/usr/local/bin/port-shaper"   # 仅菜单/查看
CONF_DIR="/etc/port-shaper"
ENV_FILE="${CONF_DIR}/env"
SERVICE_FILE="/etc/systemd/system/port-shaper.service"

DOWN_MODE_DEFAULT="police"
DEV_DEFAULT="eth0"
IFB_ENABLE_DEFAULT="1"

# 可选：指定固定版本（tag），例如 v0.1.3；不设则装 latest
INSTALL_VERSION="${INSTALL_VERSION:-}"

# 是否自动尝试开放 UFW 端口（1=是，0=否）
OPEN_UFW="${OPEN_UFW:-0}"

# ================== 工具函数 ==================
detect_arch() {
  case "$(uname -m)" in
    x86_64|amd64)  echo "amd64" ;;
    aarch64|arm64) echo "arm64" ;;
    *) echo "Unsupported arch: $(uname -m)" >&2; exit 1 ;;
  esac
}

random_port() {
  if command -v shuf >/dev/null 2>&1; then
    shuf -i 20000-60000 -n 1
  else
    awk -v min=20000 -v max=60000 'BEGIN{srand(); print int(min+rand()*(max-min+1))}'
  fi
}

random_token() {
  if command -v openssl >/dev/null 2>&1; then
    openssl rand -hex 32 | sha256sum | awk '{print $1}'
  else
    date +%s%N | sha256sum | awk '{print $1}'
  fi
}

random_suffix() {
  if command -v openssl >/dev/null 2>&1; then
    openssl rand -base64 12 | tr '+/' '-_' | tr -d '='
  else
    date +%s%N | md5sum | cut -c1-16
  fi
}

public_ip() {
  for cmd in \
    "curl -fsS --max-time 3 https://api.ipify.org" \
    "curl -fsS --max-time 3 https://ifconfig.me" \
    "dig +short myip.opendns.com @resolver1.opendns.com"
  do
    IP=$(bash -lc "$cmd" 2>/dev/null || true)
    [[ -n "${IP:-}" ]] && { echo "$IP"; return; }
  done
  echo "0.0.0.0"
}

need_pkg() { dpkg -s "$1" >/dev/null 2>&1 || sudo apt-get install -y "$1"; }

install_deps() {
  sudo apt-get update -y
  need_pkg iproute2
  need_pkg curl
  need_pkg ca-certificates
  need_pkg dnsutils || true     # 提供 dig
  need_pkg coreutils || true    # 提供 shuf/sha256sum
}

dl_url_for() {
  local arch="$1" file=""
  case "$arch" in
    amd64) file="${BIN_NAME}-linux-amd64" ;;
    arm64) file="${BIN_NAME}-linux-arm64" ;;
  esac
  if [[ -n "${INSTALL_VERSION}" ]]; then
    echo "https://github.com/${REPO}/releases/download/${INSTALL_VERSION}/${file}"
  else
    echo "https://github.com/${REPO}/releases/latest/download/${file}"
  fi
}

download_binary() {
  local arch="$1" url tmp
  url="$(dl_url_for "$arch")"
  tmp="$(mktemp -d)"
  echo "Downloading: ${url}"
  if ! curl -fL --retry 3 --connect-timeout 8 -o "${tmp}/${BIN_NAME}" "$url"; then
    echo "Download failed. If this is a new release, set INSTALL_VERSION=vX.Y.Z and retry." >&2
    exit 1
  fi
  sudo install -d -m 0755 "${BIN_DIR}"
  sudo install -m 0755 "${tmp}/${BIN_NAME}" "${BIN_PATH}"
  rm -rf "$tmp"
}

# 迁移旧 env（BASE_PATH -> SUFFIX），不存在就新建
write_env() {
  local port token suffix
  sudo install -d -m 0755 "${CONF_DIR}"

  port="$(random_port)"
  token="$(random_token)"
  suffix="$(random_suffix)"

  if [[ -f "${ENV_FILE}" ]]; then
    sudo cp "${ENV_FILE}" "${ENV_FILE}.bak.$(date +%s)" || true

    # BASE_PATH 迁移成 SUFFIX（去掉前导 /）
    if grep -qE '^BASE_PATH=' "${ENV_FILE}"; then
      old=$(grep -E '^BASE_PATH=' "${ENV_FILE}" | head -1 | cut -d= -f2- | sed 's#^/##')
      sudo sed -i 's/^BASE_PATH=.*/SUFFIX='"${old}"'/' "${ENV_FILE}"
    fi

    # 确保关键项存在
    grep -qE '^SUFFIX='     "${ENV_FILE}" || echo "SUFFIX=${suffix}"             | sudo tee -a "${ENV_FILE}" >/dev/null
    grep -qE '^PORT='       "${ENV_FILE}" || echo "PORT=${port}"                 | sudo tee -a "${ENV_FILE}" >/dev/null
    grep -qE '^API_TOKEN='  "${ENV_FILE}" || echo "API_TOKEN=${token}"           | sudo tee -a "${ENV_FILE}" >/dev/null
    grep -qE '^DEV='        "${ENV_FILE}" || echo "DEV=${DEV_DEFAULT}"           | sudo tee -a "${ENV_FILE}" >/dev/null
    grep -qE '^DOWN_MODE='  "${ENV_FILE}" || echo "DOWN_MODE=${DOWN_MODE_DEFAULT}" | sudo tee -a "${ENV_FILE}" >/dev/null
    grep -qE '^IFB_ENABLE=' "${ENV_FILE}" || echo "IFB_ENABLE=${IFB_ENABLE_DEFAULT}" | sudo tee -a "${ENV_FILE}" >/dev/null
  else
    sudo tee "${ENV_FILE}" >/dev/null <<EOF
# Auto-generated by install.sh
API_TOKEN=${token}
PORT=${port}
DEV=${DEV_DEFAULT}
SUFFIX=${suffix}
DOWN_MODE=${DOWN_MODE_DEFAULT}
IFB_ENABLE=${IFB_ENABLE_DEFAULT}
EOF
  fi

  # 清理陈旧键
  sudo sed -i '/^BASE_PATH=/d' "${ENV_FILE}"
  sudo chmod 600 "${ENV_FILE}"
}

write_service() {
  sudo tee "${SERVICE_FILE}" >/dev/null <<EOF
[Unit]
Description=Port Shaper API service
After=network-online.target
Wants=network-online.target

[Service]
Type=simple
EnvironmentFile=${ENV_FILE}
ExecStart=${BIN_PATH} serve
Restart=on-failure
RestartSec=2s
AmbientCapabilities=CAP_NET_ADMIN
CapabilityBoundingSet=CAP_NET_ADMIN
NoNewPrivileges=true
ProtectSystem=full
PrivateTmp=true
StandardInput=null

[Install]
WantedBy=multi-user.target
EOF
  sudo systemctl daemon-reload
  sudo systemctl enable port-shaper
}

write_cli() {
  sudo tee "${CLI_PATH}" >/dev/null <<'EOF'
#!/usr/bin/env bash
set -euo pipefail
ENV="/etc/port-shaper/env"
[[ -f "$ENV" ]] || { echo "env file not found: $ENV"; exit 1; }
# shellcheck disable=SC1090
source "$ENV"

get_local_ip(){ ip route get 8.8.8.8 2>/dev/null | awk '/src/{for(i=1;i<=NF;i++) if($i=="src"){print $(i+1); exit}}' || echo 127.0.0.1; }
get_public_ip(){ [[ -n "${1:-}" ]] && echo "$1" && return; command -v curl >/dev/null 2>&1 && curl -fsS --max-time 3 https://api.ipify.org || true; }

show_info(){
  local L P U
  L="$(get_local_ip)"; P="$(get_public_ip "${1:-}")"; [[ -z "$P" ]] && P="$L"
  U="/${SUFFIX#/}"
  echo "================ Port Shaper ================"
  echo "Dev:          ${DEV}"
  echo "Port:         ${PORT}"
  echo "Suffix:       ${U}"
  echo "Down Mode:    ${DOWN_MODE}"
  echo "IFB Enable:   ${IFB_ENABLE}"
  echo "API Token:    ${API_TOKEN}"
  echo "---------------------------------------------"
  echo "Local URL:    http://${L}:${PORT}${U}"
  echo "Public URL:   http://${P}:${PORT}${U}"
  echo "============================================="
}

menu(){
  while true; do
    echo; echo " 1) 查看访问信息"; echo " 2) 查看 systemd 状态"; echo " 3) 查看最近日志"; echo " 4) 重启服务"; echo " 0) 退出"
    read -rp "请选择: " c
    case "$c" in
      1) show_info ;;
      2) systemctl status port-shaper --no-pager ;;
      3) journalctl -u port-shaper -n 100 --no-pager ;;
      4) systemctl restart port-shaper && echo "已重启" ;;
      0) exit 0 ;;
      *) echo "无效选择" ;;
    esac
  done
}

if [[ -t 1 ]]; then menu; else show_info "$@"; fi
EOF
  sudo chmod +x "${CLI_PATH}"
}

open_ufw_port() {
  if [[ "${OPEN_UFW}" != "1" ]]; then return; fi
  if command -v ufw >/dev/null 2>&1; then
    # shellcheck disable=SC1091
    source "${ENV_FILE}"
    sudo ufw allow "${PORT}/tcp" || true
  fi
}

start_service() {
  sudo systemctl restart port-shaper
  sleep 1
  sudo systemctl --no-pager --full status port-shaper || true
}

health_check() {
  # shellcheck disable=SC1091
  source "${ENV_FILE}"
  local URL="http://127.0.0.1:${PORT}/${SUFFIX}/health"
  echo "Probing: ${URL}"
  if ! out=$(curl -fsS -H "Authorization: Bearer ${API_TOKEN}" "${URL}" 2>&1 || true); then
    echo "Health check failed (service可能仍在启动，或防火墙未放行)。稍后可再试：" >&2
    echo "  curl -H 'Authorization: Bearer ${API_TOKEN}' ${URL}" >&2
  else
    echo "Health check OK: ${out}"
  fi
}

uninstall_all() {
  echo "Uninstalling port-shaper..."
  sudo systemctl stop port-shaper || true
  sudo systemctl disable port-shaper || true
  sudo rm -f "${SERVICE_FILE}"
  sudo systemctl daemon-reload
  sudo rm -f "${CLI_PATH}"
  sudo rm -rf "${BIN_DIR}"
  # 如需保留配置，注释掉下一行
  sudo rm -rf "${CONF_DIR}"
  echo "Done."
}

# ================== 主流程 ==================
main() {
  if [[ "${1:-}" == "--uninstall" ]]; then
    uninstall_all
    exit 0
  fi

  install_deps
  ARCH="$(detect_arch)"
  PUBIP="$(public_ip)"

  download_binary "$ARCH"
  write_env
  write_service
  start_service
  write_cli
  open_ufw_port
  health_check

  # 展示安装摘要
  # shellcheck disable=SC1091
  source "${ENV_FILE}"
  echo
  echo "=========== INSTALL SUMMARY ==========="
  echo "Binary:      ${BIN_PATH}"
  echo "CLI:         ${CLI_PATH}"
  echo "Config:      ${ENV_FILE}"
  echo "Service:     ${SERVICE_FILE}"
  echo "---------------------------------------"
  echo "Local URL:   http://127.0.0.1:${PORT}/${SUFFIX}"
  echo "Public URL:  http://${PUBIP}:${PORT}/${SUFFIX}"
  echo "API Token:   ${API_TOKEN}"
  echo "Dev:         ${DEV}"
  echo "Down Mode:   ${DOWN_MODE}"
  echo "IFB Enable:  ${IFB_ENABLE}"
  echo "---------------------------------------"
  echo "查看信息/菜单： port-shaper"
  echo "非交互输出：   port-shaper ${PUBIP}"
  echo "指定版本安装： INSTALL_VERSION=v0.1.3 bash install.sh"
  echo "卸载：         bash install.sh --uninstall"
  echo "======================================="
}

main "$@"