#!/usr/bin/env bash
set -euo pipefail

REPO="beiaduo/port-shaper"
BIN_NAME="port-shaper"
# 二进制安装到独立目录，避免与 CLI 同名冲突
BIN_DIR="/usr/local/lib/port-shaper"
BIN_PATH="${BIN_DIR}/${BIN_NAME}"

# CLI 仅用于显示信息/菜单（命令名仍然叫 port-shaper）
CLI_PATH="/usr/local/bin/port-shaper"

CONF_DIR="/etc/port-shaper"
ENV_FILE="${CONF_DIR}/env"

SERVICE_FILE="/etc/systemd/system/port-shaper.service"

# 默认参数
DOWN_MODE_DEFAULT="police"   # 下载限速模式：police 或 ifb（容器里多用 police）
DEV_DEFAULT="eth0"

detect_arch() {
  case "$(uname -m)" in
    x86_64|amd64)  echo "amd64" ;;
    aarch64|arm64) echo "arm64" ;;
    *) echo "Unsupported arch: $(uname -m)" >&2; exit 1 ;;
  esac
}

random_port() {
  if command -v shuf >/dev/null 2>&1; then
    shuf -i 20000-60000 -n 1
  else
    awk -v min=20000 -v max=60000 'BEGIN{srand(); print int(min+rand()*(max-min+1))}'
  fi
}

random_token() {
  if command -v openssl >/dev/null 2>&1; then
    # 生成 32 字节随机，再 SHA-256 一次，便于复制
    openssl rand -hex 32 | sha256sum | awk '{print $1}'
  else
    date +%s%N | sha256sum | awk '{print $1}'
  fi
}

random_suffix() {
  if command -v openssl >/dev/null 2>&1; then
    openssl rand -base64 12 | tr '+/' '-_' | tr -d '='
  else
    date +%s%N | md5sum | cut -c1-16
  fi
}

public_ip() {
  for cmd in \
    "curl -fsS --max-time 3 https://api.ipify.org" \
    "curl -fsS --max-time 3 https://ifconfig.me" \
    "dig +short myip.opendns.com @resolver1.opendns.com"
  do
    IP=$(bash -lc "$cmd" 2>/dev/null || true)
    if [[ -n "${IP:-}" ]]; then echo "$IP"; return; fi
  done
  echo "0.0.0.0"
}

need_pkg() {
  dpkg -s "$1" >/dev/null 2>&1 || sudo apt-get install -y "$1"
}

install_deps() {
  sudo apt-get update -y
  need_pkg iproute2
  need_pkg curl
  need_pkg ca-certificates
  need_pkg dnsutils || true
  need_pkg coreutils || true     # 带 shuf
}

download_binary() {
  local arch="$1" url bin_file tmp
  case "$arch" in
    amd64) bin_file="${BIN_NAME}-linux-amd64" ;;
    arm64) bin_file="${BIN_NAME}-linux-arm64" ;;
  esac
  url="https://github.com/${REPO}/releases/latest/download/${bin_file}"
  tmp="$(mktemp -d)"
  echo "Downloading ${url} ..."
  curl -fL --retry 3 --connect-timeout 5 -o "${tmp}/${BIN_NAME}" "$url"
  sudo install -d -m 0755 "${BIN_DIR}"
  sudo install -m 0755 "${tmp}/${BIN_NAME}" "${BIN_PATH}"
  rm -rf "$tmp"
}

write_env() {
  local port="$1" token="$2" suffix="$3"
  sudo install -d -m 0755 "${CONF_DIR}"
  sudo tee "${ENV_FILE}" >/dev/null <<EOF
# Auto-generated by install.sh
API_TOKEN=${token}
PORT=${port}
DEV=${DEV_DEFAULT}
SUFFIX=${suffix}
DOWN_MODE=${DOWN_MODE_DEFAULT}
IFB_ENABLE=1
EOF
  sudo chmod 600 "${ENV_FILE}"
}

write_service() {
  # ⬇️ 关键点：ExecStart 调用的是二进制的完整路径 + "serve"
  sudo tee "${SERVICE_FILE}" >/dev/null <<EOF
[Unit]
Description=Port Shaper API service
After=network-online.target
Wants=network-online.target

[Service]
Type=simple
EnvironmentFile=${ENV_FILE}
ExecStart=${BIN_PATH} serve
Restart=on-failure
RestartSec=2s
AmbientCapabilities=CAP_NET_ADMIN
CapabilityBoundingSet=CAP_NET_ADMIN
NoNewPrivileges=true
ProtectSystem=full
PrivateTmp=true
StandardInput=null

[Install]
WantedBy=multi-user.target
EOF
  sudo systemctl daemon-reload
  sudo systemctl enable port-shaper
}

write_cli() {
  # CLI 同名为 port-shaper，但只是信息菜单，不会被服务使用
  sudo tee "${CLI_PATH}" >/dev/null <<'EOF'
#!/usr/bin/env bash
set -euo pipefail
ENV="/etc/port-shaper/env"

if [[ ! -f "$ENV" ]]; then
  echo "env file not found: $ENV"
  exit 1
fi
# shellcheck disable=SC1090
source "$ENV"

get_local_ip() {
  ip route get 8.8.8.8 2>/dev/null | awk '/src/ {for(i=1;i<=NF;i++) if($i=="src") {print $(i+1); exit}}' || echo "127.0.0.1"
}

get_public_ip() {
  if [[ -n "${1:-}" ]]; then echo "$1"; return; fi
  if command -v curl >/dev/null 2>&1; then
    curl -fsS --max-time 3 https://api.ipify.org || true
  fi
}

show_info() {
  local LOCAL_IP PUBLIC_IP URL_BASE
  LOCAL_IP="$(get_local_ip)"
  PUBLIC_IP="$(get_public_ip "${1:-}")"
  [[ -z "$PUBLIC_IP" ]] && PUBLIC_IP="$LOCAL_IP"
  URL_BASE="/${SUFFIX#/}"

  echo "================ Port Shaper ================"
  echo "Dev:          ${DEV}"
  echo "Port:         ${PORT}"
  echo "Suffix:       ${URL_BASE}"
  echo "Down Mode:    ${DOWN_MODE}"
  echo "IFB Enable:   ${IFB_ENABLE}"
  echo "API Token:    ${API_TOKEN}"
  echo "---------------------------------------------"
  echo "Local URL:    http://${LOCAL_IP}:${PORT}${URL_BASE}"
  echo "Public URL:   http://${PUBLIC_IP}:${PORT}${URL_BASE}"
  echo "============================================="
}

menu() {
  while true; do
    echo
    echo " 1) 查看访问信息"
    echo " 2) 查看 systemd 状态"
    echo " 3) 查看最近日志"
    echo " 4) 重启服务"
    echo " 0) 退出"
    read -rp "请选择: " c
    case "$c" in
      1) show_info ;;
      2) systemctl status port-shaper --no-pager ;;
      3) journalctl -u port-shaper -n 100 --no-pager ;;
      4) systemctl restart port-shaper && echo "已重启" ;;
      0) exit 0 ;;
      *) echo "无效选择" ;;
    esac
  done
}

if [[ -t 1 ]]; then
  menu
else
  show_info "$@"
fi
EOF
  sudo chmod +x "${CLI_PATH}"
}

start_service() {
  sudo systemctl restart port-shaper
  sleep 1
  sudo systemctl --no-pager --full status port-shaper || true
}

main() {
  install_deps
  ARCH="$(detect_arch)"
  PORT="$(random_port)"
  TOKEN="$(random_token)"
  SUFFIX="$(random_suffix)"
  PUBIP="$(public_ip)"

  download_binary "$ARCH"
  write_env "$PORT" "$TOKEN" "$SUFFIX"
  write_service
  start_service
  write_cli

  echo
  echo "=========== INSTALL SUMMARY ==========="
  echo "Binary:      ${BIN_PATH}"
  echo "CLI:         ${CLI_PATH}"
  echo "Config:      ${ENV_FILE}"
  echo "Service:     ${SERVICE_FILE}"
  echo "---------------------------------------"
  echo "Local URL:   http://127.0.0.1:${PORT}/${SUFFIX}"
  echo "Public URL:  http://${PUBIP}:${PORT}/${SUFFIX}"
  echo "API Token:   ${TOKEN}"
  echo "Dev:         ${DEV_DEFAULT}"
  echo "Down Mode:   ${DOWN_MODE_DEFAULT}"
  echo "IFB Enable:  1"
  echo "---------------------------------------"
  echo "查看信息/菜单： port-shaper"
  echo "非交互输出：   port-shaper ${PUBIP}"
  echo "======================================="
}

main "$@"